{"version":3,"sources":["constants.js","utils.js","store/index.js","stars/Star.js","stars/PlayAgain.js","stars/StarsDisplay.js","numbers/NumberButton.js","numbers/NumbersDisplay.js","global/TimeoutContext.js","timer/Timer.js","hooks/useInterval.js","game/Game.js","App.js","reportWebVitals.js","index.js"],"names":["GameState","Object","freeze","PLAYING","Symbol","WON","LOSE","ButtonsStatuses","available","color","backgroundColor","used","wrong","candidate","range","min","max","Array","from","length","_","i","sum","arr","reduce","total","current","randomSum","sumSet","Set","add","item","otherItems","filter","other","sumArray","values","Math","random","randomArrayItem","v","useGameState","maxStarsCount","maxGuessCount","timeout","genStarsCount","numbers","useState","availableNumbers","setAvailableNumbers","starsCount","setStarsCount","candidateNumbers","setCandidateNumbers","gameState","setGameState","time","setTime","setNewCandidates","newCandidates","candidates","newNumbers","n","includes","starsCountMatch","setTimeout","Star","className","PlayAgain","onPlayAgainClick","style","marginRight","onClick","StarsDisplay","map","starId","NumberButton","props","number","status","NumbersDisplay","count","statusFn","TimeoutContext","createContext","undefined","newTime","Timer","isRunning","onTimeout","useContext","callback","delay","savedCallback","useRef","useEffect","id","setInterval","clearInterval","useInterval","Game","startNewGame","config","join","Provider","value","currentStatus","App","gameId","setGameId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d6ede076.chunk.js","sourcesContent":["const GameState = Object.freeze({\n  PLAYING: Symbol(\"playing\"),\n  WON: Symbol(\"won\"),\n  LOSE: Symbol(\"lose\")\n})\n\nconst ButtonsStatuses = Object.freeze({\n  available: {\n    color: \"black\",\n    backgroundColor: \"lightgray\"\n  },\n  used: {\n    color: \"white\",\n    backgroundColor: \"lightgreen\"\n  },\n  wrong: {\n    color: \"white\",\n    backgroundColor: \"lightcoral\"\n  },\n  candidate: {\n    color: \"white\",\n    backgroundColor: \"deepskyblue\"\n  }\n})\n\nexport {\n  GameState,\n  ButtonsStatuses\n}","const range = (min, max) => Array.from(\n  { length: max },\n  (_, i) => i + min\n)\n\nconst randomInt = (min, max) => Math.floor(\n  (Math.random() * max) + min\n)\n\nconst randomArrayItem = (arr) => arr[\n  arr.length * Math.random() | 0\n]\n\nconst sum = (arr) => arr.reduce(\n  (total, current) => total + current, 0\n)\n\nconst randomSum = (arr, min, max) => {\n  if (arr.length === 1) return arr[0]\n\n  const sumSet = new Set()\n  sumSet.add(sum(arr))\n\n  for (const item of arr) {\n    sumSet.add(item)\n    const otherItems = arr.filter(i => i !== item)\n    sumSet.add(sum(otherItems))\n    for (const other of otherItems) {\n      sumSet.add(item + other)\n    }\n  }\n\n  const sumArray = Array.from(sumSet.values())\n\n  return randomArrayItem(\n    !!min && !!max\n      ? sumArray.filter(v => v >= min && v <= max)\n      : sumArray\n  )\n}\n\nexport {\n  range,\n  randomInt,\n  randomArrayItem,\n  sum,\n  randomSum\n}\n","import { useState } from 'react'\nimport { GameState } from '../constants'\nimport { range, randomSum, sum } from '../utils'\n\nconst useGameState = ({ maxStarsCount, maxGuessCount, timeout }) => {\n  const genStarsCount = (numbers) => randomSum(numbers, 1, maxGuessCount)\n\n  const [availableNumbers, setAvailableNumbers] = useState(range(1, maxStarsCount))\n  const [starsCount, setStarsCount] = useState(genStarsCount(availableNumbers))\n  const [candidateNumbers, setCandidateNumbers] = useState([])\n  const [gameState, setGameState] = useState(GameState.PLAYING)\n  const [time, setTime] = useState(timeout)\n\n  const starsCountMatch = (numbers, candidates) => {\n    const newNumbers =\n      numbers.filter(n => !candidates.includes(n))\n\n    setCandidateNumbers([])\n    setAvailableNumbers(newNumbers)\n    setStarsCount(genStarsCount(newNumbers))\n    newNumbers.length === 0 && setGameState(GameState.WON)\n    newNumbers.length > 0 && setTime(timeout)\n  }\n\n  const setNewCandidates = (newCandidates) =>\n    sum(newCandidates) === starsCount\n      ? starsCountMatch(availableNumbers, newCandidates)\n      : setCandidateNumbers(newCandidates)\n\n  const setTimeout = () => {\n    setGameState(GameState.LOSE)\n  }\n\n  return {\n    availableNumbers,\n    starsCount,\n    candidateNumbers,\n    gameState,\n    setNewCandidates,\n    time,\n    setTime,\n    setTimeout\n  }\n}\n\nexport {\n  useGameState\n}\n","export const Star = () => {\n  return <span className=\"star\">‚≠ê</span>\n}\n","import { GameState } from '../constants'\n\nexport const PlayAgain = ({ gameState, onPlayAgainClick }) => {\n  return <div className=\"play-again\">\n    <span style={{ marginRight: \"0.5rem\" }} >\n      {gameState === GameState.WON ? \"Won\" : \"Lose\"}\n    </span>\n    <button onClick={onPlayAgainClick}>Play again</button>\n  </div>\n}\n\n","import { GameState } from '../constants'\nimport { Star } from './Star'\nimport { PlayAgain } from './PlayAgain'\nimport { range } from '../utils'\n\nexport const StarsDisplay = ({ gameState, starsCount, onPlayAgainClick }) => {\n  return <>\n    {gameState === GameState.PLAYING\n      ? <div className=\"display\">\n        {range(1, starsCount)\n          .map(starId =>\n            <Star key={starId} />\n          )\n        }\n      </div>\n      : <PlayAgain\n        gameState={gameState}\n        onPlayAgainClick={onPlayAgainClick}\n      />}\n  </>\n}","export const NumberButton = (props) => {\n  const { number, status, onClick } = props\n  const { color, backgroundColor } = status\n\n  return <button\n    className=\"number-button\"\n    style={{ color, backgroundColor }}\n    onClick={onClick(number, status)}\n  >\n    {number}\n  </button>\n}\n","import { NumberButton } from \"./NumberButton\"\nimport { range } from \"../utils\"\n\nexport const NumbersDisplay = ({ count, statusFn, onClick }) => {\n  return <div className=\"display\">\n    {range(1, count)\n      .map(number =>\n        <NumberButton\n          key={number}\n          number={number}\n          status={statusFn(number)}\n          onClick={onClick}\n        />)\n    }\n  </div>\n}\n","import { createContext } from \"react\";\n\nconst TimeoutContext = createContext({\n  time: undefined,\n  setTime: (newTime) => { }\n})\n\nexport {\n  TimeoutContext\n}","import { useContext } from \"react\"\nimport { TimeoutContext } from '../global'\nimport { useInterval } from \"../hooks\"\n\nexport const Timer = ({ isRunning, onTimeout }) => {\n  const { time, setTime } = useContext(TimeoutContext)\n\n  useInterval(() => {\n    const newTime = time - 1\n\n    setTime(newTime)\n    newTime === 0 && onTimeout()\n  }, 1000, isRunning)\n\n  return <pre className=\"timer\">Timeout: {time}</pre>\n}\n","import { useEffect, useRef } from \"react\"\n\nconst useInterval = (callback, delay, isRunning = true) => {\n  const savedCallback = useRef()\n\n  useEffect(() => {\n    savedCallback.current = callback\n  })\n\n  useEffect(() => {\n    function tick() {\n      savedCallback.current()\n    }\n\n    if (isRunning) {\n      let id = setInterval(tick, delay)\n      return () => clearInterval(id)\n    }\n  }, [delay, isRunning])\n}\n\nexport {\n  useInterval\n}\n","import { useGameState } from '../store'\nimport { StarsDisplay } from '../stars'\nimport { NumbersDisplay } from '../numbers'\nimport { Timer } from '../timer'\nimport { TimeoutContext } from '../global'\nimport { ButtonsStatuses, GameState } from '../constants'\nimport { sum } from '../utils'\n\nexport const Game = ({ startNewGame }) => {\n  const config = {\n    maxStarsCount: 9,\n    maxGuessCount: 18,\n    timeout: 10\n  }\n\n  const {\n    starsCount,\n    availableNumbers,\n    candidateNumbers,\n    gameState,\n    setNewCandidates,\n    time,\n    setTime,\n    setTimeout\n  } = useGameState(config)\n\n  const { used, available, candidate, wrong } = ButtonsStatuses\n\n  const handleNumberClick = (number, currentStatus) => () => {\n    if (currentStatus === used) return\n\n    const newCandidates = currentStatus === candidate || currentStatus === wrong\n      ? candidateNumbers.filter(n => n !== number)\n      : [number, ...candidateNumbers]\n\n    setNewCandidates(newCandidates)\n  }\n\n  const numberStatus = (number) =>\n    candidateNumbers.includes(number)\n      ? sum(candidateNumbers) <= starsCount\n        ? candidate\n        : wrong\n      : availableNumbers.includes(number)\n        ? available\n        : used\n\n  return (\n    <main>\n      <header>\n        <pre>Current: {starsCount}</pre>\n        <pre>Available: [{availableNumbers.join(\", \")}]</pre>\n        <pre>Candidates: [{candidateNumbers.join(\", \")}]</pre>\n        <pre>Candidates sum: {sum(candidateNumbers)}</pre>\n        <TimeoutContext.Provider value={{ time, setTime }}>\n          <Timer\n            isRunning={gameState === GameState.PLAYING}\n            onTimeout={setTimeout}\n          />\n        </TimeoutContext.Provider>\n      </header>\n      <div className=\"content\">\n        <StarsDisplay\n          gameState={gameState}\n          starsCount={starsCount}\n          onPlayAgainClick={startNewGame}\n        />\n        <NumbersDisplay\n          count={config.maxStarsCount}\n          statusFn={numberStatus}\n          onClick={handleNumberClick}\n        />\n      </div>\n    </main>\n  )\n}","import { useState } from 'react';\nimport './App.css';\nimport { Game } from './game'\n\nfunction App() {\n  const [gameId, setGameId] = useState(1)\n  return (\n    <Game\n      key={gameId}\n      startNewGame={() => setGameId(gameId + 1)}\n    />\n  )\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}